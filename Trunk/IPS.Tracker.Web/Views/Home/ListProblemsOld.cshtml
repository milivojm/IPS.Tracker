<script src="~/Scripts/knockout-3.1.0.js"></script>
@model IEnumerable<IPS.Tracker.Web.TrackerService.DefectDTO>

<div id="filter" class="btn-group pull-right" style="margin-bottom: 10px;">
    <button id="opnButton" type="button" class="btn btn-default" data-bind="click:showOpen">Otvoreni</button>
    <button id="clsButton" type="button" class="btn btn-default" data-bind="click:showClosed">Riješeni</button>
</div>

<table class="table">
    <thead>
        <tr>
            <th>Broj
            </th>
            <th>Prioritet
            </th>
            <th>Datum prijave
            </th>
            <th>Stanje zadatka
            </th>
            <th class="col-md-2">Naziv
            </th>
            <th class="col-md-2">Radni nalog
            </th>
            <th>Prijavio
            </th>
            <th>Zadužen
            </th>
            <th></th>
        </tr>
    </thead>

    <tbody data-bind="foreach: visibleProblems">
        <tr>
            <td>
                <a data-bind="attr:{href:detailsLink()}, text:id"></a>
            </td>
            <td>
                <span data-bind="visible:showPriorityGlyph()" class="glyphicon glyphicon-fire"></span> <span data-bind="text:priorityDescription"></span>
            </td>
            <td data-bind="text:defectDate">
            </td>
            <td data-bind="text:stateDescription">
            </td>
            <td data-bind="text:summary">
            </td>
            <td>
                <a data-bind="visible:isWorkOrder(),text:workOrderName,attr:{href:workOrderLink()}"></a>
            </td>
            <td>                
                <a data-bind="attr:{href:reporterLink()},text:reporterName"></a>
            </td>
            <td>
                <a data-bind="attr:{href:assigneeLink()},text:assigneeName"></a>
            </td>
            <td>
                <a data-bind="visible:$root.editMode, attr:{href:editLink()}" class="btn btn-primary btn-sm">Uredi</a>
                <a data-bind="attr:{href:detailsLink()}" class="btn btn-info btn-sm">Detalji</a>
            </td>
        </tr>
    </tbody>
</table>

<ul class="pagination" data-bind="foreach: pages">
    <li data-bind="css:{active:isActive}"><a href='#' data-bind='text:pageText, click:$parent.changePage'></a></li>
</ul>

<div>
    <h5>Broj zadataka <span class="badge" data-bind="text:countProblems"></span></h5>
</div>

<script type="text/javascript">
    function Page (text,isActive){
        var self = this;

        self.pageText = text;
        self.isActive = isActive;
    }
    
    function Problem(id, priorityDescription, defectDate, stateDescription, summary, workOrderName, workOrderId, reporterName, assigneeName, reporterId, assigneeId) {
        var self = this;

        self.id = id;
        self.priorityDescription = priorityDescription;
        self.defectDate = defectDate;
        self.stateDescription = stateDescription;
        self.summary = summary;
        self.workOrderName = workOrderName;
        self.workOrderId = workOrderId;
        self.reporterName = reporterName;
        self.assigneeName = assigneeName;
        self.reporterId = reporterId;
        self.assigneeId = assigneeId;
        
        self.detailsLink = function(){
            var detailsUrl = '@Url.Action("Details", "Home")';
            return detailsUrl + '/' + self.id;
        };

        self.showPriorityGlyph = function() {
            return self.priorityDescription == "Visok";
        };

        self.isWorkOrder = function(){
            return self.workOrderName != null;
        };

        self.workOrderLink = function(){
            var listProblemsUrl = '@Url.Action("ListProblemsByWorkOrder", "Home")';
            return listProblemsUrl + "?workOrderId=" + self.workOrderId;
        };

        self.editLink = function(){
            var editUrl = '@Url.Action("Edit", "Home")';
            return editUrl + '/' + self.id;
        };

        self.assigneeLink = function(){
            var assigneeUrl = '@Url.Action("ListProblemsByUser", "Home")';
            return assigneeUrl + "?userId=" + self.assigneeId;
        };

        self.reporterLink = function(){
            var assigneeUrl = '@Url.Action("ListProblemsByUser", "Home")';
                    return assigneeUrl + "?userId=" + self.reporterId;
            };
    }

    function ListProblemsViewModel() {
        var self = this;
        self.page = 0;
        self.status = "Otvoren";
        self.editMode = '@ViewBag.EditMode' == 'True';
        self.recordsPerPage = @ViewBag.DefectsPerPage;
        var problemsJson = @Html.Raw(Json.Encode(Model));
        self.problems = [];
        self.prepaginatedProblems = [];

        for (i=0;i<problemsJson.length;i++){
            var row = problemsJson[i];
            var p = new Problem(row.Id,row.PriorityDescription,row.DefectDateString, row.StateDescription, row.Summary, row.WorkOrderName, row.WorkOrderId, row.ReporterName, row.AssigneeName, row.ReporterId, row.AssigneeId);
            self.problems.push(p);
        }

        self.visibleProblems=ko.observableArray(); 
        self.pages = ko.observableArray();
        self.countProblems = ko.observable(1);
        
        self.refreshProblems = function(){
            self.prepaginatedProblems = [];                        

            for (i=0;i<self.problems.length;i++){
                var problem = self.problems[i];

                if (self.status=="Otvoren" && problem.stateDescription!="Riješen")
                    self.prepaginatedProblems.push(problem);

                if (self.status=="Riješen" && problem.stateDescription=="Riješen")
                    self.prepaginatedProblems.push(problem);
            }
            
            self.paginateProblems();
            self.drawPager();
            self.countProblems(self.prepaginatedProblems.length);
        }

        self.paginateProblems = function(){
            var problemsBeforePagination = self.prepaginatedProblems;
            self.visibleProblems.removeAll();

            var startIndex = self.page*self.recordsPerPage;
            var endIndex = (self.page+1)*self.recordsPerPage-1;

            if (endIndex >= problemsBeforePagination.length)
                endIndex = problemsBeforePagination.length - 1;

            for (var i = startIndex; i <= endIndex; i++){
                self.visibleProblems.push(problemsBeforePagination[i]);
            }
        }

        self.showOpen = function (){
            self.status = "Otvoren";
            setState(self.status);
            self.refreshProblems();
        }

        self.showClosed = function (){
            self.status = "Riješen";
            setState(self.status);
            self.refreshProblems();
        }

        self.drawPager = function(){
            var numberOfPages = self.numberOfPages();
            self.pages.removeAll();

            if (numberOfPages < 2)
                return;

            var firstPage = self.page - 1;
            
            if (firstPage < 1)
                firstPage = 1;

            var lastPage = firstPage + 4;
            
            if (lastPage > numberOfPages)
                lastPage = numberOfPages;
            
            self.pages.push(new Page("«",false));

            for (var i = firstPage; i<= lastPage; i++)
                self.pages.push(new Page(i,i == (self.page+1)));
            
            self.pages.push(new Page("»",false));
        }

        self.numberOfPages = function (){
            var numberOfPages = Math.ceil(self.prepaginatedProblems.length / self.recordsPerPage);
            return numberOfPages;
        }

        self.changePage = function(linkValue){
            var numberOfPages = self.numberOfPages();

            if (linkValue.pageText == "«")
                self.page--;
            else 
                if (linkValue.pageText == "»")
                    self.page++;
                else {
                    self.page = parseInt(linkValue.pageText)-1;
                }            

            if (self.page<0)
                self.page = 0;

            if (self.page >= numberOfPages)
                self.page = numberOfPages - 1;

            self.paginateProblems();
            self.drawPager();
        }

        self.refreshProblems();
    }

    ko.applyBindings(new ListProblemsViewModel());

    function setState(state){
        $("#filter > .btn").removeClass("active");

        if (state == "Otvoren")
            $("#opnButton").addClass("active");
        else
            $("#clsButton").addClass("active");
    }

    setState("Otvoren"); // default state
</script>
